define domain domainExample
type robot {
    location: room;
    carryingObject: boolean;
}

type package {
    location: room || robot;
    numberOfItems: int;
}

type room {
    doors: door[];
}

type door {
    locked: boolean;
    connectedRooms: room[];

}

type key {
    location: room || robot || door;
    doorToUnlock: door;
}

type item {
    location: room || robot || package;
}


action pickUpKey(robot r, key k){
    if(r.carryingObject == false && r.location == k.location){
        k.location = r;
        r.carryingObject = true;
    }
}

action pickUpPackage(robot r, package p){
    if(robot.carryingObject == false && robot.location == package.location){
        package.location = robot;
        robot.carryingObject = true;
    }
}

action pickUpItem(robot r, item i){
    if(robot.carryingObject == false && robot.location == item.location){
        item.location = robot;
        robot.carryingObject = true;
    }
}


action placePackage(robot r, package p, room r){
    if (package.location == robot && robot.location == room){
        package.location = room;
        robot.carryingObject = false;
    }
}

action packItem(robot r, item i, room r, package p){
    if (item.location == robot && robot.location == package.location && package.closed == false){
        item.location = package;
        robot.carryingObject = false;
        package.numberOfItems = package.numberOfItems + 1;
    }
}

action closePackage(robot r, package p){
    if (package.numberOfItems == 6 && robot.location == package.location){
        package.closed = true;
    }
}

define problem robotProblemExample
import domainExample
objects{

    robot robots[] = {r1};
    package packages[] = {p1, p2, p3};
    room rooms[] = {A, B, C, D, E};
    door doors[] = {d1, d2, d3, d4, d5};
    key keys[] = {k1, k2, k3};
    item items[] = {i1, i2, i3, i4, i5, i6};


}
initialState{
    r1.location = A;
    robots[0].location = rooms[1];
    robots[0].location = rooms[1];

    robots[0].carryingObject = false;

    packages[0].location = rooms[0];
    packages[1].location = rooms[3];
    packages[2].location = rooms[4];
    packages[0,1,2].numberOfItems = 0;

    room[0].doors = door[1, 2];

    doors[0,2,3].locked = true;
    doors[1,4].locked = false;
    doors[0].connectedRooms = rooms[0, 4];

    keys[0].location = rooms[0];
    keys[1].location = rooms[3];
    keys[2].location = rooms[4];
    keys[0].doorToUnlock = doors[0];
    keys[1].doorToUnlock = doors[2];
    keys[2].doorToUnlock = doors[3];

    item[0].location = robots[0];
    item[1,2,3,4].location = rooms[2];
    item[5].location = package[2];

    door[0].locked = numberOfItems == 20;


    item[1,2].location = rooms[2, 4];
}

goalState{
    packages[0,1,2].numberOfItems == 2;
    packages[0,1].location == rooms[2];
    packages[2].location == rooms[4];

    packages[0,1,2].numberOfItems == 2
     && packages[0,1].location == rooms[2]
     && packages[2].location == rooms[4];

    packages[0,1,2].numberOfItems == 2 || 4;

    packages[0,1,2].numberOfItems >= 2;
    packages[0,1,2].numberOfItems != 2;

    packages[0].numberOfItems > packages[2].numberOfItems;

    packages[0,1].numberOfItems > packages[2,3,4].numberOfItems;


    robots[0].location > keys[1].location;   robots[0].location > keys[1].location;

}
