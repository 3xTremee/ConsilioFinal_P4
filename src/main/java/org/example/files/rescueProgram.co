define domain Delivery

type Location { }

type Truck { location: Location; capacity: int; load: int; battery: int; }

type Package { location: Location; weight: int; carried: boolean; delivered: boolean; }

type Robot { location: Location; capacity: int; carrying: boolean; }

action moveTruck(Truck t, Location from, Location to) {
    if (t.location == from && t.battery > 0) {
        t.location = to;
        t.battery = t.battery - 1;
    }
}

action loadPackage(Package p, Truck t) {
    if (p.location == t.location && t.load + p.weight <= t.capacity && p.carried == false) {
        p.carried = true;
        t.load = t.load + p.weight;
    }
}

action unloadPackage(Package p, Truck t) {
    if (p.carried == true && p.location == t.location) {
        p.carried = false;
        p.delivered = true;
        t.load = t.load - p.weight;
    }
}

action rechargeTruck(Truck t) {
    if (t.battery < t.capacity) {
        t.battery = t.capacity;
    }
}


action complexOperation(Truck t, Package p) {
    if (p.weight > 5 || t.capacity - t.load >= p.weight && t.load > 0) {
        t.load = t.load + 1;
        p.carried = true;
    }
}

action decrementLoad(Truck t) {
    if (t.load > 0) {
        t.load = t.load - 1;
    }
}

action conditionChain(Truck t) {
    if (t.battery > 5 && t.capacity > t.load) {
        t.load = t.load + 1;
    }
}
define problem DeliveryProblem import Delivery

objects {
    Location locations[] = { L1, L2, L3, L4 };
    Truck trucks[] = { T1, T2 };
    Package packages[] = { P1, P2, P3 };
    Robot robots[] = { R1, R2 };
}

initialState {
    T1.location = L1;
    T1.capacity = 13;
    T1.load = 0;
    T1.battery = 12;
    T2.location = L2;
    T2.capacity = 11;
    T2.load = 2;
    T2.battery = 3;
    P1.location = L2;
    P1.weight = 4;
    P1.carried = false;
    P1.delivered = false;
    P2.location = L3;
    P2.weight = 5;
    P2.carried = false;
    P2.delivered = false;
    P3.location = L1;
    P3.weight = 3;
    P3.carried = false;
    P3.delivered = false;
    R1.location = L1;
    R1.capacity = 2;
    R1.carrying = false;
    R2.location = L3;
    R2.capacity = 1;
    R2.carrying = false;
}

goalState {
    P1.delivered == true;
    P2.delivered == true;
    P3.delivered == true;
}