define domain knightTour

type Knight {
    location: Square;
}

type Square {
    row: int;
    col: int;
    isVisited: boolean;
}

action moveKnight(Knight N, Square from, Square to) {
    if (to.isVisited == false && N.location == from
         && (( (from.row - to.row == 2 || from.row - to.row == 0-2)
         && (from.col - to.col == 1 || from.col - to.col == 0-1))
         || ( (from.row - to.row == 1 || from.row - to.row == 0-1)
         && (from.col - to.col == 2 || from.col - to.col == 0-2)))) {
        to.isVisited = true;
        N.location = to;
    }
}
define problem knightTour
import knightTour

objects {
    Knight knight[]  = {N1};
    Square squares[] = {
        A1, A2, A3, A4,
        B1, B2, B3, B4,
        C1, C2, C3, C4,
        D1, D2, D3, D4,
        E1, E2, E3, E4,
        F1, F2, F3, F4};
}

initialState {
    knight[0].location = A1;

    squares[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].isVisited = false;
    A1.isVisited = true;

    squares[0,1,2,3].row = 1;
    squares[4,5,6,7].row = 2;
    squares[8,9,10,11].row = 3;
    squares[12,13,14,15].row = 4;
    squares[16,17,18,19].row = 5;
    squares[20,21,22,23].row = 6;

    squares[0,4,8,12,16,20].col = 1;
    squares[1,5,9,13,17,21].col = 2;
    squares[2,6,10,14,18,22].col = 3;
    squares[3,7,11,15,19,23].col = 4;
}

goalState {
    squares[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].isVisited == true;
}