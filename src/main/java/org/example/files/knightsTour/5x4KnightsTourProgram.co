define domain knightTour

type Knight {
    location: Square;
}

type Square {
    row: int;
    col: int;
    isVisited: boolean;
}

action moveKnight(Knight N, Square from, Square to) {
    if (to.isVisited == false && N.location == from
         && (( (from.row - to.row == 2 || from.row - to.row == 0-2)
         && (from.col - to.col == 1 || from.col - to.col == 0-1))
         || ( (from.row - to.row == 1 || from.row - to.row == 0-1)
         && (from.col - to.col == 2 || from.col - to.col == 0-2)))) {
        to.isVisited = true;
        N.location = to;
    }
}
define problem knightTour
import knightTour

objects {
    Knight knight[]  = {N1};
    Square squares[] = {
        A1, A2, A3, A4,
        B1, B2, B3, B4,
        C1, C2, C3, C4,
        D1, D2, D3, D4,
        E1, E2, E3, E4};
}

initialState {
    knight[0].location = A1;

    squares[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19].isVisited = false;
    A1.isVisited = true;

    A1.row = 1; A1.col = 1;  A2.row = 1; A2.col = 2;  A3.row = 1; A3.col = 3; A4.row = 1; A4.col = 4;
    B1.row = 2; B1.col = 1;  B2.row = 2; B2.col = 2;  B3.row = 2; B3.col = 3; B4.row = 2; B4.col = 4;
    C1.row = 3; C1.col = 1;  C2.row = 3; C2.col = 2;  C3.row = 3; C3.col = 3; C4.row = 3; C4.col = 4;
    D1.row = 4; D1.col = 1;  D2.row = 4; D2.col = 2;  D3.row = 4; D3.col = 3; D4.row = 4; D4.col = 4;
    E1.row = 5; E1.col = 1;  E2.row = 5; E2.col = 2;  E3.row = 5; E3.col = 3; E4.row = 5; E4.col = 4;
}

goalState {
    squares[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19].isVisited == true;
}