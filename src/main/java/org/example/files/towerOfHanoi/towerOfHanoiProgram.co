define domain towerOfHanoiDomain

type Disc {
    size: int;
    peg: Peg;
    below: Disc;
    belowSize: int;
}

type Peg {
    top: Disc;
    topSize: int;
}

action move(Peg from, Peg to, Disc D){
    if (D.tower == from && from.top == D && to.topSize > D.size ){
        from.top = D.below;
        from.topSize = D.belowSize;
        D.below = to.top;
        D.belowSize = to.topSize;
        to.top = D;
        to.topSize = D.size;
        D.peg = to;
    }
}
define problem towerOfHanoiProblem
import towerOfHanoiDomain

objects{
    Peg pegs[] = {A, B, C};
    Disc discs[] = {D1,D2,D3};
    Disc groundDisc[] = {G};
}

initialState{
    G.size = 4; G.peg = A; G.below = G; G.belowSize = 4;
    A.top = G; A.topSize = 4;
    B.top = G; B.topSize = 4;
    C.top = G; C.topSize = 4;

    D1.size = 1; D2.size = 2; D3.size = 3;

    A.top = D1; A.topSize = D1.size;

    D1.peg = A; D1.below = D2; D1.belowSize = 2;
    D2.peg = A; D2.below = D3; D2.belowSize = 3;
    D3.peg = A; D3.below = G;  D3.belowSize = 4;
}

goalState{
    discs[0,1,2].peg == C;
}