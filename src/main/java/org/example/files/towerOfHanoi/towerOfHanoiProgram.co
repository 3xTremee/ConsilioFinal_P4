define domain towerOfHanoiDomain

type Peg {
    topSize: int;
    top: Disk;
}

type Disk {
    peg: Peg;
    size: int;
    below: Disk;
    belowSize: int;
}

action moveDisk(Disk D, Peg from, Peg to) {
    if (D.peg == from && from.top == D && D.size < to.topSize) {
        from.top = D.below;
        from.topSize = D.belowSize;
        D.below = to.top;
        D.belowSize = to.topSize;
        to.top = D;
        to.topSize = D.size;
        D.peg = to;
    }
}
define problem towerOfHanoiProblem
import towerOfHanoiDomain

objects {
    Peg pegs[] = {A, B, C};
    Disk disks[] = {D3, D2, D1};
    Disk groundDisk[] = {G};
}

initialState {
    G.size      = 4;
    G.peg       = A;
    G.below     = G;
    G.belowSize = 4;

    disks[0,1,2].peg = A;

    D3.size = 3;  D3.below = G;  D3.belowSize = 4;
    D2.size = 2;  D2.below = D3; D2.belowSize = 3;
    D1.size = 1;  D1.below = D2; D1.belowSize = 2;

    A.top = G;  A.topSize = 4;
    B.top = G;  B.topSize = 4;
    C.top = G;  C.topSize = 4;
    A.top = D1;  A.topSize = 1;
}

goalState {
    disks[0,1,2].peg == C;
}