define domain listReversalDomain

type Node {
  next: Node || NullType;
}

type List {
  head: Node || NullType;
  prev: Node || NullType;
  curr: Node || NullType;
  next: Node || NullType;
}

type NullType {

}

action initialize(Node start, List list, NullType null){
    if (start.next != null){
        list.head = start;
        list.prev = null;
        list.curr = start;
        list.next  = null;
    }
}

action reverseStep(List list, NullType null, Node curr, Node nxt){
    if (list.curr != null && list.curr == curr){
        list.next = curr.next;
        curr.next = list.prev;
        list.prev = curr;
        list.curr = next;
        list.head = list.prev;
    }
}
define problem listReversalProblem
import listReversalDomain

objects {
    Node nodes[] = {N1, N2, N3};
    List theList[] = {L1};
    NullType nulls[] = {nul1};
}

initialState {
    N1.next = N2;
    N2.next = N3;
    N3.next = nul1;

    L1.head = N1;
    L1.prev = nul1;
    L1.curr = N1;
    L1.next = nul1;
}

goalState {
    L1.curr == nul1 && N3.next == N2 && N2.next == N1 && N1.next == nul1;
}